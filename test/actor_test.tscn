[gd_scene load_steps=5 format=3 uid="uid://c5gp5de2oi4dt"]

[ext_resource type="Texture2D" uid="uid://bude4na0hnosm" path="res://icon.svg" id="2_1x0lk"]

[sub_resource type="GDScript" id="GDScript_pdst4"]
script/source = "@tool
extends Node2D

@export var color:Color:
	set(to):
		color = to
		queue_redraw()
@export var thickness:float:
	set(to):
		thickness = to
		queue_redraw()
@export var separation:float:
	set(to):
		separation = to
		queue_redraw()

func _process(delta: float) -> void:
	queue_redraw()

func _draw() -> void:
	var rect:Rect2 = get_canvas_transform().affine_inverse() * get_viewport_rect()
	
	var left:float = floor((rect.position.x-thickness)/separation)*separation
	var right:float = ceil((rect.end.x+thickness)/separation)*separation
	var top:float = floor((rect.position.y-thickness)/separation)*separation
	var bottom:float = ceil((rect.end.y+thickness)/separation)*separation
	
	if(is_nan(left)||is_inf(left)||is_nan(right)||is_inf(right)||is_nan(top)||is_inf(top)||is_nan(bottom)||is_inf(bottom)):
		return
	if((right-left)/separation>100 || (bottom-top)/separation>100):
		return
	
	var x:float = left
	while(x<=right):
		draw_line(Vector2(x,top),Vector2(x,bottom),color,thickness)
		x+=separation
	var y:float = top
	while(y<=bottom):
		draw_line(Vector2(left,y),Vector2(right,y),color,thickness)
		y+=separation
"

[sub_resource type="GDScript" id="GDScript_qd7x4"]
script/source = "extends Actor


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	global_position = global_position.move_toward(get_global_mouse_position(), (global_position-get_global_mouse_position()).length()*delta)
	var avgvel:Vector2 = get_average_velocity()
	var avgacc:Vector2 = get_average_acceleration()
	$AvgVel.points = [Vector2.ZERO, avgvel]
	$AvgAcc.points = [Vector2.ZERO, avgacc]
"

[sub_resource type="GDScript" id="GDScript_8evbc"]
script/source = "extends Actor


var angular_velocity:float

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	
	var torque:float = Ballistics.find_torque_to_angle(rotation, angular_velocity, (get_global_mouse_position()-global_position).angle(), 1)
	angular_velocity += torque
	
	rotation += angular_velocity * delta
	
	$Target.points = [Vector2.ZERO, (get_global_mouse_position()-global_position).rotated(-rotation)]
"

[node name="ActorTest" type="Node"]

[node name="Grid" type="Node2D" parent="."]
script = SubResource("GDScript_pdst4")
color = Color(0.18359, 0.18359, 0.18359, 1)
thickness = 1.0
separation = 256.0

[node name="Actor" type="Node2D" parent="."]
script = SubResource("GDScript_qd7x4")
max_health = null
immortal = null
free_on_death = null
radius = null

[node name="Sprite2D" type="Sprite2D" parent="Actor"]
scale = Vector2(0.25, 0.25)
texture = ExtResource("2_1x0lk")

[node name="AvgVel" type="Line2D" parent="Actor"]
width = 2.0
default_color = Color(0.309804, 0.32549, 1, 1)

[node name="AvgAcc" type="Line2D" parent="Actor"]
points = PackedVector2Array(282, -389)
width = 2.0
default_color = Color(1, 0.376471, 0.368627, 1)

[node name="Actor2" type="Node2D" parent="."]
position = Vector2(550, 491)
script = SubResource("GDScript_8evbc")

[node name="Line2D" type="Line2D" parent="Actor2"]
points = PackedVector2Array(0, 0, 128, 0)
width = 2.0

[node name="Sprite2D" type="Sprite2D" parent="Actor2"]
scale = Vector2(0.25, 0.25)
texture = ExtResource("2_1x0lk")

[node name="Target" type="Line2D" parent="Actor2"]
width = 2.0
default_color = Color(0.32549, 0.831373, 0.317647, 1)
