[gd_scene load_steps=3 format=3 uid="uid://1ou2bpdp2log"]

[sub_resource type="GDScript" id="GDScript_sewsl"]
script/source = "@tool
extends Node2D

var points:Array[Vector2]
var thrusts:Array[Vector2]
var endpoints:Array[Vector2]

var startpos:Vector2
var velpos:Vector2
var vel_enabled:bool
var accpos:Vector2
var acc_enabled:bool

var endpos:Vector2
var endvelpos:Vector2
var endvel_enabled:bool
var endaccpos:Vector2
var endacc_enabled:bool

@export var timestep:float = 0.1:
	set(to):
		timestep=to
		update()
		queue_redraw()
@export var duration:float = 5:
	set(to):
		duration=to
		update()
		queue_redraw()
@export_range(0,1) var brake:float = 1:
	set(to):
		brake=to
		update()
		queue_redraw()

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	var changed:bool = false
	if(global_position!=startpos):
		startpos=global_position
		changed=true
	if($Vel.global_position!=velpos):
		velpos=$Vel.global_position
		changed=true
	if($Vel.visible!=vel_enabled):
		vel_enabled=$Vel.visible
		changed=true
	if($Acc.global_position!=accpos):
		accpos=$Acc.global_position
		changed=true
	if($Acc.visible!=acc_enabled):
		acc_enabled=$Acc.visible
		changed=true
	if($End.global_position!=endpos):
		endpos=$End.global_position
		changed=true
	if($EndVel.global_position!=endvelpos):
		endvelpos=$EndVel.global_position
		changed=true
	if($EndVel.visible!=endvel_enabled):
		endvel_enabled=$EndVel.visible
		changed=true
	if($EndAcc.global_position!=endaccpos):
		endaccpos=$EndAcc.global_position
		changed=true
	if($EndAcc.visible!=endacc_enabled):
		endacc_enabled=$EndAcc.visible
		changed=true
	if(changed):
		update()
		queue_redraw()

func update()->void:
	points = [startpos]
	endpoints = [endpos]
	thrusts = []
	var time:float = 0
	var velocity:Vector2 = velpos-startpos if vel_enabled else Vector2.ZERO
	var acceleration:Vector2 = accpos-startpos if acc_enabled else Vector2.ZERO
	var end_velocity:Vector2 = endvelpos - endpos if endvel_enabled else Vector2.ZERO
	var end_acceleration:Vector2 = endaccpos - endpos if endacc_enabled else Vector2.ZERO
	while(time<duration):
		var thrust:Vector2 = Ballistics.find_thrust_to_position(points.back(), velocity, acceleration, 
			endpoints.back(), end_velocity, end_acceleration, 100, brake)
		thrusts.push_back(thrust)
		velocity += (thrust + acceleration) * timestep
		points.push_back(points.back() + velocity*timestep)
		end_velocity += end_acceleration * timestep
		endpoints.push_back(endpoints.back() + end_velocity*timestep)
		time+=timestep
	thrusts.push_back(Vector2.ZERO)# just to match sizes

func _draw() -> void:
	
	for n:int in range(points.size()):
		draw_circle(points[n]-global_position,2 if n%10==0 else 1,Color.WHITE)
		draw_circle(endpoints[n]-global_position,2 if n%10==0 else 1,Color.RED)
		draw_line(points[n]-global_position, points[n]-global_position + thrusts[n]/20, Color.GREEN)
		if(n%10==0):
			draw_line(points[n]-global_position, endpoints[n]-global_position, Color.BLUE)
	
"

[sub_resource type="GDScript" id="GDScript_v7sbi"]
script/source = "@tool
extends Node2D

@export var timestep:float = 0.1:
	set(to):
		timestep=to
		update()
		queue_redraw()
@export var duration:float = 5:
	set(to):
		duration=to
		update()
		queue_redraw()
@export var proj_speed:float = 100:
	set(to):
		proj_speed=to
		update()
		queue_redraw()

var pos:Vector2
var tpos:Vector2
var tvelpos:Vector2

var points:Array[Vector2]
var tpoints:Array[Vector2]

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	var changed:bool = false
	if(global_position!=pos):
		pos=global_position
		changed=true
	if($Target.global_position!=tpos):
		tpos=$Target.global_position
		changed=true
	if($TargetVel.global_position!=tvelpos):
		tvelpos=$TargetVel.global_position
		changed=true
	if(changed):
		update()
		queue_redraw()

func update()->void:
	points = [pos]
	tpoints = [tpos]
	var time:float = 0
	var tvel:Vector2 = tvelpos - tpos
	var pvel:Vector2 = Ballistics.aim_shot_linear(pos,Vector2.ZERO,tpos,tvel,proj_speed)
	while(time<duration):
		points.push_back(points.back() + pvel*timestep)
		tpoints.push_back(tpoints.back() + tvel*timestep)
		time+=timestep

func _draw() -> void:
	
	for n:int in range(points.size()):
		draw_circle(points[n]-global_position,2 if n%10==0 else 1,Color.WHITE)
		draw_circle(tpoints[n]-global_position,2 if n%10==0 else 1,Color.RED)
		if(n%10==0):
			draw_line(points[n]-global_position, tpoints[n]-global_position, Color.BLUE)
	
"

[node name="BallisticsTest" type="Node"]

[node name="Trajectory" type="Node2D" parent="."]
position = Vector2(428, 129)
script = SubResource("GDScript_sewsl")
duration = 10.0
brake = 0.0

[node name="Vel" type="Marker2D" parent="Trajectory"]
position = Vector2(99, 101)

[node name="Acc" type="Marker2D" parent="Trajectory"]
visible = false
position = Vector2(110, 108)

[node name="End" type="Marker2D" parent="Trajectory"]
position = Vector2(218, -27)

[node name="EndVel" type="Marker2D" parent="Trajectory"]
position = Vector2(312, 43)

[node name="EndAcc" type="Marker2D" parent="Trajectory"]
position = Vector2(192, -28)

[node name="LinearShot" type="Node2D" parent="."]
position = Vector2(-174, 449)
script = SubResource("GDScript_v7sbi")

[node name="Target" type="Marker2D" parent="LinearShot"]
position = Vector2(19, 168)

[node name="TargetVel" type="Marker2D" parent="LinearShot"]
position = Vector2(103, 119)
