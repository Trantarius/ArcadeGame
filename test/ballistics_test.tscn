[gd_scene load_steps=4 format=3 uid="uid://1ou2bpdp2log"]

[sub_resource type="GDScript" id="GDScript_v7sbi"]
script/source = "@tool
extends Node2D

@export var timestep:float = 0.1:
	set(to):
		timestep=to
		update()
		queue_redraw()
@export var duration:float = 5:
	set(to):
		duration=to
		update()
		queue_redraw()
@export var proj_speed:float = 100:
	set(to):
		proj_speed=to
		update()
		queue_redraw()

var pos:Vector2
var tpos:Vector2
var tvelpos:Vector2

var points:Array[Vector2]
var tpoints:Array[Vector2]
var hit:Vector2

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	var changed:bool = false
	if(global_position!=pos):
		pos=global_position
		changed=true
	if($Target.global_position!=tpos):
		tpos=$Target.global_position
		changed=true
	if($TargetVel.global_position!=tvelpos):
		tvelpos=$TargetVel.global_position
		changed=true
	if(changed):
		update()
		queue_redraw()

func update()->void:
	points = [pos]
	tpoints = [tpos]
	var time:float = 0
	var tvel:Vector2 = (tvelpos - tpos).limit_length(proj_speed)
	var intercept:Dictionary = Ballistics.solve_linear_intercept(pos,proj_speed,tpos,tvel)
	hit = intercept.intercept
	while(time<duration):
		points.push_back(points.back() + intercept.velocity*timestep)
		tpoints.push_back(tpoints.back() + tvel*timestep)
		time+=timestep

func _draw() -> void:
	
	var inv:Transform2D = global_transform.affine_inverse()
	
	for n:int in range(points.size()):
		draw_circle(inv*points[n],2 if n%10==0 else 1,Color.WHITE)
		draw_circle(inv*tpoints[n],2 if n%10==0 else 1,Color.RED)
		if(n%10==0):
			draw_line(inv*points[n], inv*tpoints[n], Color.BLUE)
	
	if(hit.is_finite()):
		draw_circle(inv*hit, 3, Color.GREEN)
	
"

[sub_resource type="GDScript" id="GDScript_vwxwc"]
script/source = "@tool
extends Node2D

@export var timestep:float = 0.1:
	set(to):
		timestep=to
		update()
		queue_redraw()
@export var duration:float = 5:
	set(to):
		duration=to
		update()
		queue_redraw()
@export var proj_speed:float = 100:
	set(to):
		proj_speed=to
		update()
		queue_redraw()

var pos:Vector2
var tpos:Vector2
var tvelpos:Vector2
var taccpos:Vector2

var points:Array[Vector2]
var tpoints:Array[Vector2]
var hit:Vector2

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	var changed:bool = false
	if(global_position!=pos):
		pos=global_position
		changed=true
	if($Target.global_position!=tpos):
		tpos=$Target.global_position
		changed=true
	if($Target/TargetVel.global_position!=tvelpos):
		tvelpos=$Target/TargetVel.global_position
		changed=true
	if($Target/TargetVel/TargetAcc.global_position!=taccpos):
		taccpos=$Target/TargetVel/TargetAcc.global_position
		changed=true
	if(changed):
		update()
		queue_redraw()

func update()->void:
	points = [pos]
	tpoints = [tpos]
	var time:float = 0
	var tvel:Vector2 = (tvelpos - tpos)
	var tacc:Vector2 = (taccpos - tvelpos)
	var intercept:Dictionary = Ballistics.solve_linear_quadratic_intercept(pos,proj_speed,tpos,tvel,tacc)
	hit = intercept.intercept
	while(time<duration):
		points.push_back(points.back() + intercept.velocity*timestep)
		tpoints.push_back(tpoints.back() + tvel*timestep)
		tvel += tacc*timestep
		time+=timestep

func _draw() -> void:
	
	var inv:Transform2D = global_transform.affine_inverse()
	
	for n:int in range(points.size()):
		draw_circle(inv*points[n],2 if n%10==0 else 1,Color.WHITE)
		draw_circle(inv*tpoints[n],2 if n%10==0 else 1,Color.RED)
		if(n%10==0):
			draw_line(inv*points[n], inv*tpoints[n], Color.BLUE)
	
	if(hit.is_finite()):
		draw_circle(inv*hit, 3, Color.GREEN)
	
"

[sub_resource type="GDScript" id="GDScript_nah1q"]
script/source = "extends Node2D

var pos:Vector2
var capos:Vector2
var dapos:Vector2
var cvpos:Vector2

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	if(global_position != pos):
		pos = global_position
		queue_redraw()
	if($CurrentAngle.position != capos):
		capos = $CurrentAngle.position
		queue_redraw()
	if($DesiredAngle.position != dapos):
		dapos = $DesiredAngle.position
		queue_redraw()
	if($CurrentVelocity.position != cvpos):
		cvpos = $CurrentVelocity.position
		queue_redraw()
		

func _draw()->void:
	
	var curr_theta:float = capos.angle()
	var targ_theta:float = dapos.angle()
	var curr_vel:float = cvpos.angle() - curr_theta
	var max_torque:float = 1
	var torque:float
	
	var brake_time:float = abs(curr_vel) / max_torque
	var brake_drift:float = curr_vel*brake_time/2
	if(brake_drift>TAU):
		torque = -sign(curr_vel)*max_torque
	else:
		var anticipated_position:float = curr_theta + brake_drift
		draw_line(Vector2.ZERO, Vector2.from_angle(anticipated_position) * capos.length(), Color(1,1,0))
		torque = sign(angle_difference(anticipated_position,targ_theta))*max_torque
	
	draw_line(Vector2.ZERO, capos, Color(0,0,1))
	draw_line(Vector2.ZERO, dapos, Color(0,1,1))
	
	draw_arc(Vector2.ZERO, 50, curr_theta, curr_vel+curr_theta, 64, Color(1,0,0))
	draw_arc(Vector2.ZERO, 60, curr_theta, torque+curr_theta, 64, Color(0,1,0))"

[node name="BallisticsTest" type="Node"]

[node name="LinearIntercept" type="Node2D" parent="."]
position = Vector2(55, 194)
script = SubResource("GDScript_v7sbi")

[node name="Target" type="Marker2D" parent="LinearIntercept"]
position = Vector2(25, 62)

[node name="TargetVel" type="Marker2D" parent="LinearIntercept"]
position = Vector2(-372, 297)

[node name="LinearQuadIntercept" type="Node2D" parent="."]
position = Vector2(788, 226)
script = SubResource("GDScript_vwxwc")

[node name="Target" type="Marker2D" parent="LinearQuadIntercept"]
position = Vector2(-158, 129)

[node name="TargetVel" type="Marker2D" parent="LinearQuadIntercept/Target"]
position = Vector2(-18, -10)

[node name="TargetAcc" type="Marker2D" parent="LinearQuadIntercept/Target/TargetVel"]
position = Vector2(8, -4)

[node name="Torque" type="Node2D" parent="."]
script = SubResource("GDScript_nah1q")

[node name="CurrentAngle" type="Marker2D" parent="Torque"]
position = Vector2(125, -14)

[node name="DesiredAngle" type="Marker2D" parent="Torque"]
position = Vector2(159, 47)

[node name="CurrentVelocity" type="Marker2D" parent="Torque"]
position = Vector2(53, 92)
