[gd_scene load_steps=10 format=3 uid="uid://1ou2bpdp2log"]

[ext_resource type="Script" path="res://test/Draggable.gd" id="1_fu2jr"]
[ext_resource type="Script" path="res://test/Viewer.gd" id="2_g81i7"]
[ext_resource type="Script" path="res://test/Plot.gd" id="4_c622o"]

[sub_resource type="GDScript" id="GDScript_v7sbi"]
script/source = "extends Node2D

@export var timestep:float = 0.1:
	set(to):
		timestep=to
		update()
		queue_redraw()
@export var duration:float = 5:
	set(to):
		duration=to
		update()
		queue_redraw()
@export var proj_speed:float = 100:
	set(to):
		proj_speed=to
		update()
		queue_redraw()

var pos:Vector2
var tpos:Vector2
var tvelpos:Vector2

var points:Array[Vector2]
var tpoints:Array[Vector2]
var hit:Vector2

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	var changed:bool = false
	if(global_position!=pos):
		pos=global_position
		changed=true
	if($Target.global_position!=tpos):
		tpos=$Target.global_position
		changed=true
	if($Target/Vel.global_position!=tvelpos):
		tvelpos=$Target/Vel.global_position
		changed=true
	if(changed):
		update()
		queue_redraw()

func update()->void:
	points = [pos]
	tpoints = [tpos]
	var time:float = 0
	var tvel:Vector2 = (tvelpos - tpos)
	var intercept:Dictionary = Ballistics.solve_linear_intercept(pos,proj_speed,tpos,tvel)
	hit = intercept.intercept
	while(time<duration):
		points.push_back(points.back() + intercept.velocity*timestep)
		tpoints.push_back(tpoints.back() + tvel*timestep)
		time+=timestep

func _draw() -> void:
	
	var inv:Transform2D = global_transform.affine_inverse()
	
	for n:int in range(points.size()):
		draw_circle(inv*points[n],2 if n%10==0 else 1,Color.WHITE)
		draw_circle(inv*tpoints[n],2 if n%10==0 else 1,Color.RED)
		if(n%10==0):
			draw_line(inv*points[n], inv*tpoints[n], Color.BLUE)
	
	if(hit.is_finite()):
		draw_circle(inv*hit, 3, Color.GREEN)
	
"

[sub_resource type="GDScript" id="GDScript_vwxwc"]
script/source = "extends Node2D

@export var timestep:float = 0.1:
	set(to):
		timestep=to
		update()
		queue_redraw()
@export var duration:float = 5:
	set(to):
		duration=to
		update()
		queue_redraw()
@export var proj_speed:float = 100:
	set(to):
		proj_speed=to
		update()
		queue_redraw()

var pos:Vector2
var tpos:Vector2
var tvelpos:Vector2
var taccpos:Vector2

var points:Array[Vector2]
var tpoints:Array[Vector2]
var hit:Vector2

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	var changed:bool = false
	if(global_position!=pos):
		pos=global_position
		changed=true
	if($Target.global_position!=tpos):
		tpos=$Target.global_position
		changed=true
	if($Target/TargetVel.global_position!=tvelpos):
		tvelpos=$Target/TargetVel.global_position
		changed=true
	if($Target/TargetVel/TargetAcc.global_position!=taccpos):
		taccpos=$Target/TargetVel/TargetAcc.global_position
		changed=true
	if(changed):
		update()
		queue_redraw()

func update()->void:
	points = [pos]
	tpoints = [tpos]
	var time:float = 0
	var tvel:Vector2 = (tvelpos - tpos)
	var tacc:Vector2 = (taccpos - tvelpos)
	var intercept:Dictionary = Ballistics.solve_linear_quadratic_intercept(pos,proj_speed,tpos,tvel,tacc)
	hit = intercept.intercept
	while(time<duration):
		points.push_back(points.back() + intercept.velocity*timestep)
		tpoints.push_back(tpoints.back() + tvel*timestep)
		tvel += tacc*timestep
		time+=timestep

func _draw() -> void:
	
	var inv:Transform2D = global_transform.affine_inverse()
	
	for n:int in range(points.size()):
		draw_circle(inv*points[n],2 if n%10==0 else 1,Color.WHITE)
		draw_circle(inv*tpoints[n],2 if n%10==0 else 1,Color.RED)
		if(n%10==0):
			draw_line(inv*points[n], inv*tpoints[n], Color.BLUE)
	
	if(hit.is_finite()):
		draw_circle(inv*hit, 3, Color.GREEN)
	
"

[sub_resource type="GDScript" id="GDScript_74jfa"]
script/source = "extends Node2D

@export var timestep:float = 0.1:
	set(to):
		timestep=to
		update()
		queue_redraw()
@export var duration:float = 5:
	set(to):
		duration=to
		update()
		queue_redraw()
@export var proj_thrust:float = 100:
	set(to):
		proj_thrust=to
		update()
		queue_redraw()

var pos:Vector2
var tpos:Vector2
var tvelpos:Vector2
var vpos:Vector2

var points:Array[Vector2]
var tpoints:Array[Vector2]
var hit:Vector2

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	var changed:bool = false
	if(global_position!=pos):
		pos=global_position
		changed=true
	if($Target.global_position!=tpos):
		tpos=$Target.global_position
		changed=true
	if($Target/Vel.global_position!=tvelpos):
		tvelpos=$Target/Vel.global_position
		changed=true
	if($Vel.global_position!=vpos):
		vpos=$Vel.global_position
		changed=true
	if(changed):
		update()
		queue_redraw()

func update()->void:
	points = [pos]
	tpoints = [tpos]
	var time:float = 0
	var tvel:Vector2 = (tvelpos - tpos)
	var vel:Vector2 = vpos-pos
	var intercept:Dictionary = Ballistics.solve_quadratic_linear_intercept(pos,vel,proj_thrust,tpos,tvel)
	hit = intercept.intercept
	while(time<duration):
		points.push_back(points.back() + vel*timestep)
		tpoints.push_back(tpoints.back() + tvel*timestep)
		vel += intercept.acceleration*timestep
		time+=timestep

func _draw() -> void:
	
	var inv:Transform2D = global_transform.affine_inverse()
	
	for n:int in range(points.size()):
		draw_circle(inv*points[n],2 if n%10==0 else 1,Color.WHITE)
		draw_circle(inv*tpoints[n],2 if n%10==0 else 1,Color.RED)
		if(n%10==0):
			draw_line(inv*points[n], inv*tpoints[n], Color.BLUE)
	
	if(hit.is_finite()):
		draw_circle(inv*hit, 3, Color.GREEN)
	
"

[sub_resource type="GDScript" id="GDScript_ghg04"]
script/source = "extends Node2D

@export var timestep:float = 0.1:
	set(to):
		timestep=to
		update()
		queue_redraw()
@export var duration:float = 5:
	set(to):
		duration=to
		update()
		queue_redraw()
@export var proj_thrust:float = 100:
	set(to):
		proj_thrust=to
		update()
		queue_redraw()

var pos:Vector2
var tpos:Vector2
var tvelpos:Vector2
var taccpos:Vector2
var vpos:Vector2

var points:Array[Vector2]
var tpoints:Array[Vector2]
var hit:Vector2

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	var changed:bool = false
	if(global_position!=pos):
		pos=global_position
		changed=true
	if($Target.global_position!=tpos):
		tpos=$Target.global_position
		changed=true
	if($Target/Vel.global_position!=tvelpos):
		tvelpos=$Target/Vel.global_position
		changed=true
	if($Target/Vel/Acc.global_position!=taccpos):
		taccpos=$Target/Vel/Acc.global_position
		changed=true
	if($Vel.global_position!=vpos):
		vpos=$Vel.global_position
		changed=true
	if(changed):
		update()
		queue_redraw()

func update()->void:
	points = [pos]
	tpoints = [tpos]
	var time:float = 0
	var tvel:Vector2 = (tvelpos - tpos)
	var tacc:Vector2 = (taccpos - tvelpos)
	var vel:Vector2 = vpos-pos
	var intercept:Dictionary = Ballistics.solve_quadratic_intercept(pos,vel,proj_thrust,tpos,tvel,tacc)
	hit = intercept.intercept
	while(time<duration):
		points.push_back(points.back() + vel*timestep)
		tpoints.push_back(tpoints.back() + tvel*timestep)
		vel += intercept.acceleration*timestep
		tvel += tacc*timestep
		time+=timestep

func _draw() -> void:
	
	var inv:Transform2D = global_transform.affine_inverse()
	
	for n:int in range(points.size()):
		draw_circle(inv*points[n],2 if n%10==0 else 1,Color.WHITE)
		draw_circle(inv*tpoints[n],2 if n%10==0 else 1,Color.RED)
		if(n%10==0):
			draw_line(inv*points[n], inv*tpoints[n], Color.BLUE)
	
	if(hit.is_finite()):
		draw_circle(inv*hit, 3, Color.GREEN)
	
"

[sub_resource type="GDScript" id="GDScript_qp5e6"]
script/source = "extends Node2D

@export var timestep:float = 0.1:
	set(to):
		timestep=to
		update()
		queue_redraw()
@export var duration:float = 5:
	set(to):
		duration=to
		update()
		queue_redraw()
@export var proj_thrust:float = 100:
	set(to):
		proj_thrust=to
		update()
		queue_redraw()

var pos:Vector2
var tpos:Vector2
var tvelpos:Vector2
var vpos:Vector2

var points:Array[Vector2]
var tpoints:Array[Vector2]
var hit:Vector2

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	var changed:bool = false
	if(global_position!=pos):
		pos=global_position
		changed=true
	if($Target.global_position!=tpos):
		tpos=$Target.global_position
		changed=true
	if($Target/Vel.global_position!=tvelpos):
		tvelpos=$Target/Vel.global_position
		changed=true
	if($Vel.global_position!=vpos):
		vpos=$Vel.global_position
		changed=true
	if(changed):
		update()
		queue_redraw()

func update()->void:
	points = [pos]
	tpoints = [tpos]
	var time:float = 0
	var tvel:Vector2 = (tvelpos - tpos)
	var vel:Vector2 = vpos-pos
	while(time<duration):
		var acc:Vector2 = Ballistics.solve_rendezvous(points.back(),vel,proj_thrust,tpoints.back(),tvel)
		vel += acc*timestep
		points.push_back(points.back() + vel*timestep)
		tpoints.push_back(tpoints.back() + tvel*timestep)
		time+=timestep

func _draw() -> void:
	
	var inv:Transform2D = global_transform.affine_inverse()
	
	for n:int in range(points.size()):
		draw_circle(inv*points[n],2 if n%10==0 else 1,Color.WHITE)
		draw_circle(inv*tpoints[n],2 if n%10==0 else 1,Color.RED)
		if(n%10==0):
			draw_line(inv*points[n], inv*tpoints[n], Color.BLUE)
	
	if(hit.is_finite()):
		draw_circle(inv*hit, 3, Color.GREEN)
	
"

[sub_resource type="GDScript" id="GDScript_nah1q"]
script/source = "extends Node2D

var pos:Vector2
var capos:Vector2
var dapos:Vector2
var cvpos:Vector2

@export var timestep:float = 0.1:
	set(to):
		timestep=to
		queue_redraw()
@export var duration:float = 5:
	set(to):
		duration=to
		queue_redraw()

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	if(global_position != pos):
		pos = global_position
		queue_redraw()
	if($CurrentAngle.position != capos):
		capos = $CurrentAngle.position
		queue_redraw()
	if($DesiredAngle.position != dapos):
		dapos = $DesiredAngle.position
		queue_redraw()
	if($CurrentVelocity.position != cvpos):
		cvpos = $CurrentVelocity.position
		queue_redraw()
		

func _draw()->void:
	
	var curr_theta:float = capos.angle()
	var targ_theta:float = dapos.angle()
	var curr_vel:float = angle_difference(curr_theta, cvpos.angle())
	var max_torque:float = 1
	
	var theta_record:Array[Vector2] = []
	var vel_record:Array[Vector2] = []
	var torq_record:Array[Vector2] = []
	
	
	var time:float = 0
	while(time<duration):
		var sim:Dictionary = Ballistics.solve_torque(curr_theta, curr_vel, max_torque, targ_theta, timestep)
		theta_record.push_back(Vector2(time, curr_theta))
		vel_record.push_back(Vector2(time,curr_vel))
		torq_record.push_back(Vector2(time,sim.torque))
		curr_theta = sim.rotation
		curr_vel = sim.angular_velocity
		
		time+=timestep
	
	draw_line(Vector2.ZERO, capos, Color.RED)
	draw_line(Vector2.ZERO, cvpos, Color.GREEN)
	draw_line(Vector2.ZERO, dapos, Color.BLUE)
	
	$'../../Plot'.add_plot('rotation',{
		&'type':Plot.LINE,
		&'color':Color.RED,
		&'points':PackedVector2Array(theta_record)
	})
	
	$'../../Plot'.add_plot('velocity',{
		&'type':Plot.LINE,
		&'color':Color.GREEN,
		&'points':PackedVector2Array(vel_record)
	})
	
	$'../../Plot'.add_plot('torque',{
		&'type':Plot.LINE,
		&'color':Color.CYAN,
		&'points':PackedVector2Array(torq_record)
	})
	
"

[node name="BallisticsTest" type="Node"]

[node name="TabContainer" type="TabContainer" parent="."]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
current_tab = 5

[node name="LinearIntercept" type="Panel" parent="TabContainer"]
visible = false
clip_contents = true
layout_mode = 2
script = ExtResource("2_g81i7")

[node name="LinearIntercept" type="Node2D" parent="TabContainer/LinearIntercept"]
position = Vector2(507, 450)
script = SubResource("GDScript_v7sbi")

[node name="Target" type="ColorRect" parent="TabContainer/LinearIntercept/LinearIntercept"]
offset_left = 217.0
offset_top = 56.0
offset_right = 223.0
offset_bottom = 62.0
script = ExtResource("1_fu2jr")

[node name="Vel" type="ColorRect" parent="TabContainer/LinearIntercept/LinearIntercept/Target"]
layout_mode = 0
offset_left = -46.0
offset_top = 50.0
offset_right = -40.0
offset_bottom = 56.0
script = ExtResource("1_fu2jr")

[node name="LinearQuadIntercept" type="Panel" parent="TabContainer"]
visible = false
clip_contents = true
layout_mode = 2
script = ExtResource("2_g81i7")

[node name="LinearQuadIntercept" type="Node2D" parent="TabContainer/LinearQuadIntercept"]
position = Vector2(521, 470)
script = SubResource("GDScript_vwxwc")

[node name="Target" type="ColorRect" parent="TabContainer/LinearQuadIntercept/LinearQuadIntercept"]
offset_left = 217.0
offset_top = 56.0
offset_right = 223.0
offset_bottom = 62.0
script = ExtResource("1_fu2jr")

[node name="TargetVel" type="ColorRect" parent="TabContainer/LinearQuadIntercept/LinearQuadIntercept/Target"]
layout_mode = 0
offset_left = -46.0
offset_top = 50.0
offset_right = -40.0
offset_bottom = 56.0
script = ExtResource("1_fu2jr")

[node name="TargetAcc" type="ColorRect" parent="TabContainer/LinearQuadIntercept/LinearQuadIntercept/Target/TargetVel"]
layout_mode = 0
offset_left = -22.0
offset_top = -72.0
offset_right = -16.0
offset_bottom = -66.0
script = ExtResource("1_fu2jr")

[node name="QuadLinearIntercept" type="Panel" parent="TabContainer"]
visible = false
layout_mode = 2
script = ExtResource("2_g81i7")

[node name="QuadLinearIntercept" type="Node2D" parent="TabContainer/QuadLinearIntercept"]
position = Vector2(541, 473)
script = SubResource("GDScript_74jfa")

[node name="Target" type="ColorRect" parent="TabContainer/QuadLinearIntercept/QuadLinearIntercept"]
offset_left = 60.0
offset_top = -168.0
offset_right = 66.0
offset_bottom = -162.0
script = ExtResource("1_fu2jr")

[node name="Vel" type="ColorRect" parent="TabContainer/QuadLinearIntercept/QuadLinearIntercept/Target"]
layout_mode = 0
offset_left = 22.0
offset_top = 72.0
offset_right = 28.0
offset_bottom = 78.0
script = ExtResource("1_fu2jr")

[node name="Vel" type="ColorRect" parent="TabContainer/QuadLinearIntercept/QuadLinearIntercept"]
offset_left = -46.0
offset_top = 50.0
offset_right = -40.0
offset_bottom = 56.0
script = ExtResource("1_fu2jr")

[node name="QuadIntercept" type="Panel" parent="TabContainer"]
visible = false
layout_mode = 2
script = ExtResource("2_g81i7")

[node name="QuadIntercept" type="Node2D" parent="TabContainer/QuadIntercept"]
position = Vector2(503, 440)
script = SubResource("GDScript_ghg04")

[node name="Target" type="ColorRect" parent="TabContainer/QuadIntercept/QuadIntercept"]
offset_left = -84.0
offset_top = 131.0
offset_right = -78.0
offset_bottom = 137.0
script = ExtResource("1_fu2jr")

[node name="Vel" type="ColorRect" parent="TabContainer/QuadIntercept/QuadIntercept/Target"]
layout_mode = 0
offset_left = -59.0
offset_top = -15.0
offset_right = -53.0
offset_bottom = -9.0
script = ExtResource("1_fu2jr")

[node name="Acc" type="ColorRect" parent="TabContainer/QuadIntercept/QuadIntercept/Target/Vel"]
layout_mode = 0
offset_left = -21.0
offset_top = -53.0
offset_right = -15.0
offset_bottom = -47.0
script = ExtResource("1_fu2jr")

[node name="Vel" type="ColorRect" parent="TabContainer/QuadIntercept/QuadIntercept"]
offset_left = -47.0
offset_top = -57.0
offset_right = -41.0
offset_bottom = -51.0
script = ExtResource("1_fu2jr")

[node name="Rendezvous" type="Panel" parent="TabContainer"]
visible = false
layout_mode = 2
script = ExtResource("2_g81i7")

[node name="Rendezvous" type="Node2D" parent="TabContainer/Rendezvous"]
position = Vector2(506, 416)
script = SubResource("GDScript_qp5e6")
duration = 10.0
proj_thrust = 66.765

[node name="Vel" type="ColorRect" parent="TabContainer/Rendezvous/Rendezvous"]
offset_left = -146.0
offset_top = -19.0
offset_right = -140.0
offset_bottom = -13.0
script = ExtResource("1_fu2jr")

[node name="Target" type="ColorRect" parent="TabContainer/Rendezvous/Rendezvous"]
offset_left = -138.0
offset_top = 183.0
offset_right = -132.0
offset_bottom = 189.0
script = ExtResource("1_fu2jr")

[node name="Vel" type="ColorRect" parent="TabContainer/Rendezvous/Rendezvous/Target"]
layout_mode = 0
offset_left = 130.0
offset_top = -12.0
offset_right = 136.0
offset_bottom = -6.0
script = ExtResource("1_fu2jr")

[node name="Torque" type="VSplitContainer" parent="TabContainer"]
layout_mode = 2
split_offset = 500

[node name="Control" type="Panel" parent="TabContainer/Torque"]
layout_mode = 2

[node name="Torque" type="Node2D" parent="TabContainer/Torque/Control"]
position = Vector2(470, 259)
script = SubResource("GDScript_nah1q")

[node name="CurrentAngle" type="ColorRect" parent="TabContainer/Torque/Control/Torque"]
offset_left = 38.0
offset_top = 71.0
offset_right = 44.0
offset_bottom = 77.0
script = ExtResource("1_fu2jr")

[node name="DesiredAngle" type="ColorRect" parent="TabContainer/Torque/Control/Torque"]
offset_left = 127.0
offset_right = 133.0
offset_bottom = 6.0
script = ExtResource("1_fu2jr")

[node name="CurrentVelocity" type="ColorRect" parent="TabContainer/Torque/Control/Torque"]
offset_left = -146.0
offset_top = -19.0
offset_right = -140.0
offset_bottom = -13.0
script = ExtResource("1_fu2jr")

[node name="Plot" type="Control" parent="TabContainer/Torque"]
layout_mode = 2
script = ExtResource("4_c622o")
background_color = Color(0.0962047, 0.0962048, 0.0962047, 1)
foreground_color = Color(1, 1, 1, 1)
legend = true
left_margin = 64.0
right_margin = 200.0
top_margin = 32.0
bottom_margin = 32.0
axis_margin = 4.0
x_max = 1.0
y_auto_range = false
y_min = -3.14
y_max = 3.14
